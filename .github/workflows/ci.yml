name: CoyIM CI

on: [push, pull_request]

jobs:
  test-linux:
    runs-on: ubuntu-16.04

    env:
      GOPATH: ${{ github.workspace }}
      GO111MODULE: off
    defaults:
      run:
        working-directory: ${{ env.GOPATH }}/src/github.com/${{ github.repository }}

    strategy:
      fail-fast: false
      matrix:
        go: [ '1.15', '1.14', '1.13', '1.12', '1.11' ]

    name: Test go-${{ matrix.go }} (Linux)
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          path: ${{ env.GOPATH }}/src/github.com/${{ github.repository }}
      - name: install OS dependencies
        run: sudo apt-get install libgtk-3-dev gettext libglib2.0-dev libc6-dev-i386 xvfb
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
      - name: install project dependencies
        run: make -C ci/ deps
        env:
          DISPLAY: ':99.0'
      - name: run tests
        run: make -C ci/
        env:
          DISPLAY: ':99.0'
          COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}

  test-osx:
    runs-on: macos-latest

    env:
      GOPATH: ${{ github.workspace }}
      GO111MODULE: off
    defaults:
      run:
        working-directory: ${{ env.GOPATH }}/src/github.com/${{ github.repository }}

    name: Test go-1.14 (OS X)
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          path: ${{ env.GOPATH }}/src/github.com/${{ github.repository }}
      - name: install OS dependencies
        run: brew install gtk+3 adwaita-icon-theme hicolor-icon-theme shared-mime-info gtk-mac-integration create-dmg fileicon
      - uses: actions/setup-go@v2
        with:
          go-version: 1.14
      - name: install project dependencies
        run: make -C ci/ deps
        env:
          DISPLAY: ':99.0'
      - name: run tests
        run: make -C ci/
        env:
          DISPLAY: ':99.0'
          COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}

  notify-test:
    name: Notify on success or failure of test
    needs: [test-linux, test-osx]
    runs-on: ubuntu-20.04
    if: always()
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - uses: technote-space/workflow-conclusion-action@v1
      - uses: ./.github/actions/ci-conclusion-message
        id: message-generator
        with:
          status: ${{ env.WORKFLOW_CONCLUSION }}
          commit_id: ${{ github.sha }}
          commit_message: ${{ github.event.head_commit.message }}
      - name: send message to Matrix on conclusion
        uses: olabiniV2/matrix-message@v0.0.1
        with:
          room_id: ${{ secrets.MATRIX_COYIM_ROOM_ID }}
          access_token: ${{ secrets.MATRIX_ACCESS_TOKEN }}
          server: ${{ secrets.MATRIX_SERVER }}
          subject: ${{ steps.message-generator.outputs.subject }}
          message: ${{ steps.message-generator.outputs.message }}

  build-release-linux:
    name: Build release (Linux)
    needs: test-linux
    runs-on: ubuntu-20.04
    if: startsWith( github.ref, 'refs/tags/')

    env:
      GOPATH: ${{ github.workspace }}
      GO111MODULE: off
    defaults:
      run:
        working-directory: ${{ env.GOPATH }}/src/github.com/${{ github.repository }}

    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          path: ${{ env.GOPATH }}/src/github.com/${{ github.repository }}
      - uses: actions/setup-go@v2
        with:
          go-version: '1.14'
      - name: build release
        run: make -C ci/ release-gui-linux
      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist-linux
          path: ${{ env.GOPATH }}/src/github.com/${{ github.repository }}/release/*
          retention-days: 5
          if-no-files-found: error

  build-release-osx:
    name: Build release (OS X)
    needs: test-osx
    runs-on: macos-latest
    if: startsWith( github.ref, 'refs/tags/')

    env:
      GOPATH: ${{ github.workspace }}
      GO111MODULE: off
    defaults:
      run:
        working-directory: ${{ env.GOPATH }}/src/github.com/${{ github.repository }}

    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          path: ${{ env.GOPATH }}/src/github.com/${{ github.repository }}
      - name: install OS dependencies
        run: brew install gtk+3 adwaita-icon-theme hicolor-icon-theme shared-mime-info gtk-mac-integration create-dmg fileicon
      - uses: actions/setup-go@v2
        with:
          go-version: '1.14'
      - name: install project dependencies
        run: make -C ci/ deps
      - name: build release
        run: make -C ci/ release-dmg clean-mac-bundle release-gui
      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist-osx
          path: ${{ env.GOPATH }}/src/github.com/${{ github.repository }}/release/*
          retention-days: 5
          if-no-files-found: error

  create-release-tag:
    name: Create release tag
    runs-on: ubuntu-20.04
    if: startsWith( github.ref, 'refs/tags/v' )
    outputs:
      upload-url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  upload-release-linux:
    name: Upload release (Linux)
    needs: [build-release-linux, create-release-tag]
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/download-artifact@v2
        name: dist-linux
      - name: Upload Linux binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release-tag.outputs.upload-url }}
          asset_path: dist-linux/coyim_linux_amd64
          asset_name: coyim_linux_amd64
          asset_content_type: application/octet-stream
      - name: Upload Linux build_info
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release-tag.outputs.upload-url }}
          asset_path: dist-linux/build_info_linux_amd64
          asset_name: coyim_linux_amd64_build_info
          asset_content_type: text/plain

  upload-release-osx:
    name: Upload release (OS X)
    needs: [build-release-osx, create-release-tag]
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/download-artifact@v2
        name: dist-osx
      - name: Upload OS X binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release-tag.outputs.upload-url }}
          asset_path: dist-osx/coyim_darwin_amd64
          asset_name: coyim_darwin_amd64
          asset_content_type: application/octet-stream
      - name: Upload OS X Disk Image
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release-tag.outputs.upload-url }}
          asset_path: dist-osx/coyim.dmg
          asset_name: coyim.dmg
          asset_content_type: application/octet-stream

  upload-release-bintray-linux:
    name: Upload release to Bintray (Linux)
    needs: build-release-linux
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/download-artifact@v2
        name: dist-linux
      - name: Get the current tag
        id: current_tag
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
      - name: Upload Linux binary
        uses: reznikmm/upload-bintray-action@v2
        with:
          subject: coyim
          repository: coyim-bin
          package: linux
          version: ${{ steps.current_tag.outputs.VERSION }}
          sourcePath: dist-linux/coyim_linux_amd64
          destinationPath: amd64/coyim
          override: 1
          username: ${{secrets.BINTRAY_API_USER}}
          apiKey: ${{secrets.BINTRAY_API_KEY}}
      - name: Upload Linux build_info
        uses: reznikmm/upload-bintray-action@v2
        with:
          subject: coyim
          repository: coyim-bin
          package: linux
          version: ${{ steps.current_tag.outputs.VERSION }}
          sourcePath: dist-linux/build_info_linux_amd64
          destinationPath: amd64/build_info
          override: 1
          username: ${{secrets.BINTRAY_API_USER}}
          apiKey: ${{secrets.BINTRAY_API_KEY}}
